//The solution has been done with Hash Map and has a time complexity of O(n) and has a space complexity of O(n)//
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        unordered_map<int ,int> hash;
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            hash[nums[i]]++;
            
        }
       for(auto it:hash)
       {
           if(it.second>nums.size()/3)
           {
               ans.push_back(it.first);
           }
       }
        return ans;
    }
};
